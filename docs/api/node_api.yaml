openapi: 3.0.3
info:
  title: Orris Node Management API
  description: |
    RESTful API for managing proxy nodes, node groups, subscriptions, and traffic reporting.

    ## Features
    - Node lifecycle management (CRUD operations)
    - Node group organization and management
    - Multi-format subscription generation (Base64, Clash, V2Ray, SIP008, Surge)
    - Node traffic reporting and monitoring
    - Token-based authentication for both admin and node operations

    ## Architecture
    The system uses a node pool sharing model where nodes can be grouped into node groups,
    which are then associated with subscription plans for flexible resource allocation.
  version: 1.0.0
  contact:
    name: Orris API Support
    url: https://github.com/orris
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.orris.example.com/v1
    description: Production server
  - url: https://api-staging.orris.example.com/v1
    description: Staging server
  - url: http://localhost:8080/v1
    description: Local development server

tags:
  - name: nodes
    description: Node management operations
  - name: node-groups
    description: Node group management operations
  - name: subscriptions
    description: Subscription access endpoints
  - name: reporting
    description: Node data reporting operations

security:
  - BearerAuth: []

paths:
  /nodes:
    post:
      tags:
        - nodes
      summary: Create a new node
      description: Create a new proxy node with the specified configuration
      operationId: createNode
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNodeRequest'
            examples:
              shadowsocks:
                summary: Shadowsocks node
                value:
                  name: US-01
                  server_address: 1.2.3.4
                  server_port: 8388
                  method: aes-256-gcm
                  password: your-secure-password
                  country: US
                  region: California
                  tags:
                    - premium
                    - streaming
                  description: Premium US server for streaming
                  max_users: 100
                  traffic_limit: 1099511627776
                  sort_order: 1
      responses:
        '201':
          description: Node created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateNodeResponse'
              examples:
                success:
                  value:
                    success: true
                    message: Node created successfully
                    data:
                      node_id: 1
                      api_token: orris_node_abc123def456...
                      token_prefix: orris_node_abc1
                      server_address: 1.2.3.4
                      server_port: 8388
                      status: active
                      created_at: '2025-10-21T10:30:00Z'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

    get:
      tags:
        - nodes
      summary: List nodes
      description: Get a paginated list of nodes with optional filtering
      operationId: listNodes
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number (starts from 1)
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: page_size
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: status
          in: query
          description: Filter by node status
          schema:
            type: string
            enum:
              - active
              - inactive
              - maintenance
        - name: country
          in: query
          description: Filter by country code (e.g., US, JP, HK)
          schema:
            type: string
            minLength: 2
            maxLength: 2
      responses:
        '200':
          description: Nodes list retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListNodesResponse'
              examples:
                success:
                  value:
                    success: true
                    data:
                      items:
                        - id: 1
                          name: US-01
                          server_address: 1.2.3.4
                          server_port: 8388
                          method: aes-256-gcm
                          status: active
                          country: US
                          region: California
                          tags:
                            - premium
                          created_at: '2025-10-21T10:30:00Z'
                        - id: 2
                          name: JP-01
                          server_address: 5.6.7.8
                          server_port: 8388
                          method: chacha20-ietf-poly1305
                          status: active
                          country: JP
                          region: Tokyo
                          tags:
                            - gaming
                          created_at: '2025-10-21T11:00:00Z'
                      total: 2
                      page: 1
                      page_size: 20
                      total_pages: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /nodes/{id}:
    get:
      tags:
        - nodes
      summary: Get node by ID
      description: Retrieve detailed information about a specific node
      operationId: getNode
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/NodeId'
      responses:
        '200':
          description: Node details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeResponse'
              examples:
                success:
                  value:
                    success: true
                    data:
                      id: 1
                      name: US-01
                      server_address: 1.2.3.4
                      server_port: 8388
                      method: aes-256-gcm
                      plugin: null
                      plugin_opts: null
                      status: active
                      country: US
                      region: California
                      tags:
                        - premium
                        - streaming
                      description: Premium US server for streaming
                      max_users: 100
                      traffic_limit: 1099511627776
                      traffic_used: 53687091200
                      sort_order: 1
                      created_at: '2025-10-21T10:30:00Z'
                      updated_at: '2025-10-21T10:30:00Z'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - nodes
      summary: Update node
      description: Update node configuration and settings
      operationId: updateNode
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/NodeId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateNodeRequest'
            examples:
              updateStatus:
                summary: Update node status
                value:
                  status: maintenance
              updateConfig:
                summary: Update node configuration
                value:
                  name: US-01-Updated
                  server_port: 8389
                  method: chacha20-ietf-poly1305
                  password: new-secure-password
                  description: Updated description
      responses:
        '200':
          description: Node updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeResponse'
              examples:
                success:
                  value:
                    success: true
                    message: Node updated successfully
                    data:
                      id: 1
                      name: US-01-Updated
                      server_address: 1.2.3.4
                      server_port: 8389
                      method: chacha20-ietf-poly1305
                      status: maintenance
                      updated_at: '2025-10-21T12:00:00Z'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - nodes
      summary: Delete node
      description: Permanently delete a node from the system
      operationId: deleteNode
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/NodeId'
      responses:
        '204':
          description: Node deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /nodes/{id}/token:
    post:
      tags:
        - nodes
      summary: Generate node API token
      description: |
        Generate a new API token for node authentication. This token is used by the
        proxy node to authenticate when reporting traffic data. The token is displayed
        only once and cannot be retrieved later.
      operationId: generateNodeToken
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/NodeId'
      responses:
        '200':
          description: Token generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateTokenResponse'
              examples:
                success:
                  value:
                    success: true
                    message: Token generated successfully
                    data:
                      token: orris_node_abc123def456ghi789jkl012mno345pqr678stu901
                      token_prefix: orris_node_abc1
                      expires_at: null
                      created_at: '2025-10-21T12:30:00Z'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /nodes/report:
    post:
      tags:
        - reporting
      summary: Report node data
      description: |
        Node endpoint for reporting traffic statistics and status. This endpoint
        requires node authentication using a Bearer token. Nodes typically report
        data every 30 seconds.
      operationId: reportNodeData
      security:
        - NodeTokenAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReportNodeDataRequest'
            examples:
              basic:
                summary: Basic traffic report
                value:
                  upload: 1073741824
                  download: 5368709120
                  online_users: 12
                  status: active
              withSystemInfo:
                summary: Report with system info
                value:
                  upload: 1073741824
                  download: 5368709120
                  online_users: 12
                  status: active
                  system_info:
                    load: 1.25
                    memory_usage: 45.5
                    disk_usage: 30.2
      responses:
        '200':
          description: Data reported successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportNodeDataResponse'
              examples:
                success:
                  value:
                    success: true
                    message: Data reported successfully
                    data:
                      node_id: 1
                      recorded_at: '2025-10-21T12:45:00Z'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /node-groups:
    post:
      tags:
        - node-groups
      summary: Create a new node group
      description: Create a new node group for organizing nodes
      operationId: createNodeGroup
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNodeGroupRequest'
            examples:
              basic:
                summary: Basic node group
                value:
                  name: US Nodes
                  description: All US-based proxy nodes
                  is_public: true
                  sort_order: 1
      responses:
        '201':
          description: Node group created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeGroupResponse'
              examples:
                success:
                  value:
                    success: true
                    message: Node group created successfully
                    data:
                      id: 1
                      name: US Nodes
                      description: All US-based proxy nodes
                      is_public: true
                      sort_order: 1
                      created_at: '2025-10-21T10:00:00Z'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

    get:
      tags:
        - node-groups
      summary: List node groups
      description: Get a paginated list of node groups
      operationId: listNodeGroups
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number (starts from 1)
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: page_size
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: is_public
          in: query
          description: Filter by public visibility
          schema:
            type: boolean
      responses:
        '200':
          description: Node groups list retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListNodeGroupsResponse'
              examples:
                success:
                  value:
                    success: true
                    data:
                      items:
                        - id: 1
                          name: US Nodes
                          description: All US-based proxy nodes
                          is_public: true
                          node_count: 5
                          created_at: '2025-10-21T10:00:00Z'
                        - id: 2
                          name: Asia Nodes
                          description: Asian region nodes
                          is_public: true
                          node_count: 8
                          created_at: '2025-10-21T10:15:00Z'
                      total: 2
                      page: 1
                      page_size: 20
                      total_pages: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /node-groups/{id}:
    get:
      tags:
        - node-groups
      summary: Get node group by ID
      description: Retrieve detailed information about a specific node group
      operationId: getNodeGroup
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/NodeGroupId'
      responses:
        '200':
          description: Node group details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeGroupResponse'
              examples:
                success:
                  value:
                    success: true
                    data:
                      id: 1
                      name: US Nodes
                      description: All US-based proxy nodes
                      is_public: true
                      node_ids:
                        - 1
                        - 2
                        - 3
                      subscription_plan_ids:
                        - 10
                        - 11
                      sort_order: 1
                      created_at: '2025-10-21T10:00:00Z'
                      updated_at: '2025-10-21T10:00:00Z'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - node-groups
      summary: Update node group
      description: Update node group information
      operationId: updateNodeGroup
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/NodeGroupId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateNodeGroupRequest'
            examples:
              update:
                summary: Update node group
                value:
                  name: US Premium Nodes
                  description: Premium US servers only
                  is_public: false
      responses:
        '200':
          description: Node group updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeGroupResponse'
              examples:
                success:
                  value:
                    success: true
                    message: Node group updated successfully
                    data:
                      id: 1
                      name: US Premium Nodes
                      description: Premium US servers only
                      is_public: false
                      updated_at: '2025-10-21T12:00:00Z'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - node-groups
      summary: Delete node group
      description: Permanently delete a node group from the system
      operationId: deleteNodeGroup
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/NodeGroupId'
      responses:
        '204':
          description: Node group deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /node-groups/{id}/nodes:
    post:
      tags:
        - node-groups
      summary: Add node to group
      description: Add a node to a node group
      operationId: addNodeToGroup
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/NodeGroupId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddNodeToGroupRequest'
            examples:
              add:
                summary: Add node
                value:
                  node_id: 5
      responses:
        '200':
          description: Node added to group successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddNodeToGroupResponse'
              examples:
                success:
                  value:
                    success: true
                    message: Node added to group successfully
                    data:
                      group_id: 1
                      node_id: 5
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /node-groups/{id}/nodes/{nodeId}:
    delete:
      tags:
        - node-groups
      summary: Remove node from group
      description: Remove a node from a node group
      operationId: removeNodeFromGroup
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/NodeGroupId'
        - name: nodeId
          in: path
          required: true
          description: Node ID to remove
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '204':
          description: Node removed from group successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /sub/{token}:
    get:
      tags:
        - subscriptions
      summary: Get subscription (Base64)
      description: |
        Get Base64 encoded subscription content by token. Returns a list of
        Shadowsocks URLs encoded in Base64 format. No authentication required.
      operationId: getSubscription
      security: []
      parameters:
        - $ref: '#/components/parameters/SubscriptionToken'
      responses:
        '200':
          description: Subscription content (Base64 encoded)
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain; charset=utf-8
            Subscription-Userinfo:
              description: Traffic usage information
              schema:
                type: string
                example: upload=0; download=0; total=10737418240; expire=1735689600
          content:
            text/plain:
              schema:
                type: string
                format: byte
                description: Base64 encoded Shadowsocks URLs
              examples:
                success:
                  summary: Base64 subscription
                  value: c3M6Ly9ZV1Z6TFRJMU5pMW5ZMjA2Y0dGemMzZHZjbVJBTVM0eUxqTXVORG80TXpnNElpPSNVUy0wMQpzczovL1lXVnpMVEkxTmkxblkyMDZjR0Z6YzNkdmNtUkFOUzQyTGpjdU9EbzRNemcySVE9PSNKUC0wMQ==
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: Subscription not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                notFound:
                  value:
                    success: false
                    error:
                      type: NOT_FOUND
                      message: Subscription not found
        '500':
          $ref: '#/components/responses/InternalServerError'

  /sub/{token}/clash:
    get:
      tags:
        - subscriptions
      summary: Get Clash subscription
      description: |
        Get subscription in Clash YAML format. Returns a complete Clash
        configuration file with proxies and proxy groups.
      operationId: getClashSubscription
      security: []
      parameters:
        - $ref: '#/components/parameters/SubscriptionToken'
      responses:
        '200':
          description: Clash YAML configuration
          headers:
            Content-Type:
              schema:
                type: string
                example: application/yaml
            Content-Disposition:
              schema:
                type: string
                example: attachment; filename=clash.yaml
          content:
            application/yaml:
              schema:
                type: string
              examples:
                success:
                  summary: Clash configuration
                  value: |
                    proxies:
                      - name: US-01
                        type: ss
                        server: 1.2.3.4
                        port: 8388
                        cipher: aes-256-gcm
                        password: your-password
                      - name: JP-01
                        type: ss
                        server: 5.6.7.8
                        port: 8388
                        cipher: chacha20-ietf-poly1305
                        password: your-password
                    proxy-groups:
                      - name: Proxy
                        type: select
                        proxies:
                          - US-01
                          - JP-01
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/SubscriptionNotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /sub/{token}/v2ray:
    get:
      tags:
        - subscriptions
      summary: Get V2Ray subscription
      description: Get subscription in V2Ray JSON format
      operationId: getV2RaySubscription
      security: []
      parameters:
        - $ref: '#/components/parameters/SubscriptionToken'
      responses:
        '200':
          description: V2Ray JSON configuration
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                success:
                  summary: V2Ray configuration
                  value:
                    outbounds:
                      - protocol: shadowsocks
                        settings:
                          servers:
                            - address: 1.2.3.4
                              port: 8388
                              method: aes-256-gcm
                              password: your-password
                        tag: US-01
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/SubscriptionNotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /sub/{token}/sip008:
    get:
      tags:
        - subscriptions
      summary: Get SIP008 subscription
      description: |
        Get subscription in SIP008 (Shadowsocks) JSON format.
        SIP008 is the standard JSON format for Shadowsocks clients.
      operationId: getSIP008Subscription
      security: []
      parameters:
        - $ref: '#/components/parameters/SubscriptionToken'
      responses:
        '200':
          description: SIP008 JSON configuration
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    type: integer
                    example: 1
                  servers:
                    type: array
                    items:
                      type: object
              examples:
                success:
                  summary: SIP008 configuration
                  value:
                    version: 1
                    servers:
                      - id: us-01
                        remarks: US-01
                        server: 1.2.3.4
                        server_port: 8388
                        method: aes-256-gcm
                        password: your-password
                      - id: jp-01
                        remarks: JP-01
                        server: 5.6.7.8
                        server_port: 8388
                        method: chacha20-ietf-poly1305
                        password: your-password
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/SubscriptionNotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /sub/{token}/surge:
    get:
      tags:
        - subscriptions
      summary: Get Surge subscription
      description: Get subscription in Surge configuration format
      operationId: getSurgeSubscription
      security: []
      parameters:
        - $ref: '#/components/parameters/SubscriptionToken'
      responses:
        '200':
          description: Surge configuration
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain; charset=utf-8
          content:
            text/plain:
              schema:
                type: string
              examples:
                success:
                  summary: Surge configuration
                  value: |
                    [Proxy]
                    US-01 = ss, 1.2.3.4, 8388, encrypt-method=aes-256-gcm, password=your-password
                    JP-01 = ss, 5.6.7.8, 8388, encrypt-method=chacha20-ietf-poly1305, password=your-password

                    [Proxy Group]
                    Proxy = select, US-01, JP-01
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/SubscriptionNotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        Admin authentication using JWT token. Include the token in the
        Authorization header: `Authorization: Bearer <token>`

    NodeTokenAuth:
      type: http
      scheme: bearer
      description: |
        Node authentication using API token. Include the token in the
        Authorization header: `Authorization: Bearer <token>`.
        The token is generated via the `/nodes/{id}/token` endpoint.

  parameters:
    NodeId:
      name: id
      in: path
      required: true
      description: Node ID
      schema:
        type: integer
        format: int64
        minimum: 1
        example: 1

    NodeGroupId:
      name: id
      in: path
      required: true
      description: Node group ID
      schema:
        type: integer
        format: int64
        minimum: 1
        example: 1

    SubscriptionToken:
      name: token
      in: path
      required: true
      description: Subscription token (UUID format)
      schema:
        type: string
        format: uuid
        example: 550e8400-e29b-41d4-a716-446655440000

  schemas:
    CreateNodeRequest:
      type: object
      required:
        - name
        - server_address
        - server_port
        - method
        - password
        - country
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: Node name (unique identifier)
          example: US-01
        server_address:
          type: string
          description: Server IP address or domain name
          example: 1.2.3.4
        server_port:
          type: integer
          format: uint16
          minimum: 1
          maximum: 65535
          description: Server port number
          example: 8388
        method:
          type: string
          enum:
            - aes-256-gcm
            - aes-128-gcm
            - chacha20-ietf-poly1305
          description: Encryption method
          example: aes-256-gcm
        password:
          type: string
          minLength: 8
          maxLength: 255
          description: Encryption password (minimum 8 characters)
          example: your-secure-password
        plugin:
          type: string
          nullable: true
          enum:
            - obfs-local
            - v2ray-plugin
          description: Optional plugin name
          example: null
        plugin_opts:
          type: object
          nullable: true
          additionalProperties:
            type: string
          description: Plugin options as key-value pairs
          example:
            obfs: http
            obfs-host: www.bing.com
        country:
          type: string
          minLength: 2
          maxLength: 2
          pattern: '^[A-Z]{2}$'
          description: ISO 3166-1 alpha-2 country code
          example: US
        region:
          type: string
          maxLength: 100
          description: Region or city name
          example: California
        tags:
          type: array
          items:
            type: string
          description: Tags for categorization
          example:
            - premium
            - streaming
        description:
          type: string
          maxLength: 500
          description: Node description
          example: Premium US server for streaming
        max_users:
          type: integer
          format: uint32
          minimum: 0
          description: Maximum concurrent users (0 = unlimited)
          example: 100
          default: 0
        traffic_limit:
          type: integer
          format: uint64
          minimum: 0
          description: Traffic limit in bytes (0 = unlimited)
          example: 1099511627776
          default: 0
        sort_order:
          type: integer
          description: Display order (lower numbers appear first)
          example: 1
          default: 0

    UpdateNodeRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          nullable: true
          example: US-01-Updated
        server_address:
          type: string
          nullable: true
          example: 1.2.3.5
        server_port:
          type: integer
          format: uint16
          minimum: 1
          maximum: 65535
          nullable: true
          example: 8389
        method:
          type: string
          enum:
            - aes-256-gcm
            - aes-128-gcm
            - chacha20-ietf-poly1305
          nullable: true
        password:
          type: string
          minLength: 8
          maxLength: 255
          nullable: true
        plugin:
          type: string
          nullable: true
        plugin_opts:
          type: object
          nullable: true
          additionalProperties:
            type: string
        status:
          type: string
          enum:
            - active
            - inactive
            - maintenance
          nullable: true
          example: maintenance
        country:
          type: string
          minLength: 2
          maxLength: 2
          nullable: true
        region:
          type: string
          nullable: true
        tags:
          type: array
          nullable: true
          items:
            type: string
        description:
          type: string
          nullable: true
        max_users:
          type: integer
          format: uint32
          nullable: true
        traffic_limit:
          type: integer
          format: uint64
          nullable: true
        sort_order:
          type: integer
          nullable: true

    CreateNodeResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Node created successfully
        data:
          type: object
          properties:
            node_id:
              type: integer
              format: uint
              example: 1
            api_token:
              type: string
              description: Full API token (displayed only once)
              example: orris_node_abc123def456ghi789jkl012mno345pqr678stu901
            token_prefix:
              type: string
              description: Token prefix for identification
              example: orris_node_abc1
            server_address:
              type: string
              example: 1.2.3.4
            server_port:
              type: integer
              example: 8388
            status:
              type: string
              example: active
            created_at:
              type: string
              format: date-time
              example: '2025-10-21T10:30:00Z'

    NodeResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: ''
        data:
          $ref: '#/components/schemas/NodeDetail'

    NodeDetail:
      type: object
      properties:
        id:
          type: integer
          format: uint
          example: 1
        name:
          type: string
          example: US-01
        server_address:
          type: string
          example: 1.2.3.4
        server_port:
          type: integer
          format: uint16
          example: 8388
        method:
          type: string
          example: aes-256-gcm
        plugin:
          type: string
          nullable: true
          example: null
        plugin_opts:
          type: object
          nullable: true
          additionalProperties:
            type: string
          example: null
        status:
          type: string
          enum:
            - active
            - inactive
            - maintenance
          example: active
        country:
          type: string
          example: US
        region:
          type: string
          example: California
        tags:
          type: array
          items:
            type: string
          example:
            - premium
            - streaming
        description:
          type: string
          example: Premium US server for streaming
        max_users:
          type: integer
          format: uint32
          example: 100
        traffic_limit:
          type: integer
          format: uint64
          description: Traffic limit in bytes
          example: 1099511627776
        traffic_used:
          type: integer
          format: uint64
          description: Used traffic in bytes
          example: 53687091200
        sort_order:
          type: integer
          example: 1
        created_at:
          type: string
          format: date-time
          example: '2025-10-21T10:30:00Z'
        updated_at:
          type: string
          format: date-time
          example: '2025-10-21T10:30:00Z'

    ListNodesResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/NodeDetail'
            total:
              type: integer
              format: int64
              example: 2
            page:
              type: integer
              example: 1
            page_size:
              type: integer
              example: 20
            total_pages:
              type: integer
              example: 1

    GenerateTokenResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Token generated successfully
        data:
          type: object
          properties:
            token:
              type: string
              description: Full API token (displayed only once)
              example: orris_node_abc123def456ghi789jkl012mno345pqr678stu901
            token_prefix:
              type: string
              description: Token prefix for identification
              example: orris_node_abc1
            expires_at:
              type: string
              format: date-time
              nullable: true
              description: Token expiration time (null = never expires)
              example: null
            created_at:
              type: string
              format: date-time
              example: '2025-10-21T12:30:00Z'

    ReportNodeDataRequest:
      type: object
      required:
        - upload
        - download
      properties:
        upload:
          type: integer
          format: uint64
          description: Upload traffic in bytes since last report
          example: 1073741824
        download:
          type: integer
          format: uint64
          description: Download traffic in bytes since last report
          example: 5368709120
        online_users:
          type: integer
          description: Current number of online users
          example: 12
          default: 0
        status:
          type: string
          enum:
            - active
            - inactive
            - maintenance
          description: Current node status
          example: active
          default: active
        system_info:
          $ref: '#/components/schemas/SystemInfo'

    SystemInfo:
      type: object
      properties:
        load:
          type: number
          format: float
          description: System load average
          example: 1.25
        memory_usage:
          type: number
          format: float
          description: Memory usage percentage
          example: 45.5
        disk_usage:
          type: number
          format: float
          description: Disk usage percentage
          example: 30.2

    ReportNodeDataResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Data reported successfully
        data:
          type: object
          properties:
            node_id:
              type: integer
              format: uint
              example: 1
            recorded_at:
              type: string
              format: date-time
              example: '2025-10-21T12:45:00Z'

    CreateNodeGroupRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: Node group name
          example: US Nodes
        description:
          type: string
          maxLength: 500
          description: Node group description
          example: All US-based proxy nodes
        is_public:
          type: boolean
          description: Whether the group is publicly visible
          example: true
          default: true
        sort_order:
          type: integer
          description: Display order
          example: 1
          default: 0

    UpdateNodeGroupRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          nullable: true
        description:
          type: string
          maxLength: 500
          nullable: true
        is_public:
          type: boolean
          nullable: true
        sort_order:
          type: integer
          nullable: true

    NodeGroupResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: ''
        data:
          $ref: '#/components/schemas/NodeGroupDetail'

    NodeGroupDetail:
      type: object
      properties:
        id:
          type: integer
          format: uint
          example: 1
        name:
          type: string
          example: US Nodes
        description:
          type: string
          example: All US-based proxy nodes
        is_public:
          type: boolean
          example: true
        node_ids:
          type: array
          items:
            type: integer
            format: uint
          description: List of node IDs in this group
          example:
            - 1
            - 2
            - 3
        subscription_plan_ids:
          type: array
          items:
            type: integer
            format: uint
          description: List of associated subscription plan IDs
          example:
            - 10
            - 11
        sort_order:
          type: integer
          example: 1
        created_at:
          type: string
          format: date-time
          example: '2025-10-21T10:00:00Z'
        updated_at:
          type: string
          format: date-time
          example: '2025-10-21T10:00:00Z'

    ListNodeGroupsResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/NodeGroupDetail'
            total:
              type: integer
              format: int64
              example: 2
            page:
              type: integer
              example: 1
            page_size:
              type: integer
              example: 20
            total_pages:
              type: integer
              example: 1

    AddNodeToGroupRequest:
      type: object
      required:
        - node_id
      properties:
        node_id:
          type: integer
          format: uint
          minimum: 1
          description: Node ID to add to the group
          example: 5

    AddNodeToGroupResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Node added to group successfully
        data:
          type: object
          properties:
            group_id:
              type: integer
              format: uint
              example: 1
            node_id:
              type: integer
              format: uint
              example: 5

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          $ref: '#/components/schemas/ErrorInfo'

    ErrorInfo:
      type: object
      properties:
        type:
          type: string
          description: Error type identifier
          example: VALIDATION_ERROR
        message:
          type: string
          description: Human-readable error message
          example: Invalid input parameters
        details:
          type: string
          description: Additional error details
          example: Field 'name' is required

  responses:
    BadRequest:
      description: Bad request - Invalid input parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            validationError:
              summary: Validation error
              value:
                success: false
                error:
                  type: VALIDATION_ERROR
                  message: Invalid input parameters
                  details: Field 'name' is required

    Unauthorized:
      description: Unauthorized - Authentication required or token invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            unauthorized:
              summary: Authentication required
              value:
                success: false
                error:
                  type: UNAUTHORIZED
                  message: Authentication required
            invalidToken:
              summary: Invalid token
              value:
                success: false
                error:
                  type: UNAUTHORIZED
                  message: Invalid or expired token

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            notFound:
              summary: Resource not found
              value:
                success: false
                error:
                  type: NOT_FOUND
                  message: Resource not found

    SubscriptionNotFound:
      description: Subscription not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            notFound:
              summary: Subscription not found
              value:
                success: false
                error:
                  type: NOT_FOUND
                  message: Subscription not found

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            serverError:
              summary: Internal server error
              value:
                success: false
                error:
                  type: INTERNAL_ERROR
                  message: An unexpected error occurred
