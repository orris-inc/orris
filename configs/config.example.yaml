# ============================================================
# Orris Application Configuration Example
# ============================================================
#
# SETUP INSTRUCTIONS:
#   1. Copy this file: cp config.example.yaml config.yaml
#   2. Edit config.yaml with your settings
#   3. For production, use environment variables instead
#
# Configuration Priority (highest to lowest):
#   1. Environment variables (ORRIS_<SECTION>_<KEY>)
#   2. config.yaml file (this file after copying)
#   3. Default values in code
#
# Environment Variable Format:
#   ORRIS_<SECTION>_<KEY>
#   Example: ORRIS_SERVER_PORT=8080
#            ORRIS_DATABASE_PASSWORD=secret
#
# SECURITY WARNING:
#   - NEVER commit config.yaml with real passwords to git!
#   - config.yaml is in .gitignore for safety
#   - Always use environment variables for production secrets
# ============================================================

# ------------------------------------------------------------
# Server Configuration
# ------------------------------------------------------------
server:
  host: "0.0.0.0"  # Bind address (0.0.0.0 = all interfaces)
  port: 8081       # HTTP server port
  mode: "debug"    # Options: debug, release, test
                   # Env override: ORRIS_SERVER_MODE=release

# ------------------------------------------------------------
# Database Configuration
# ------------------------------------------------------------
database:
  host: "localhost"      # Database host
                         # Env override: ORRIS_DATABASE_HOST=your-db-host
  port: 3306             # MySQL port
  username: "orris"      # Database username
                         # Env override: ORRIS_DATABASE_USERNAME=your-user
  password: ""           # ⚠️ LEAVE EMPTY - Use environment variable!
                         # REQUIRED: ORRIS_DATABASE_PASSWORD=your_password
  database: "orris_dev"  # Database name
                         # Env override: ORRIS_DATABASE_DATABASE=orris_prod

  # Connection pool settings
  max_idle_conns: 10     # Maximum idle connections in pool
  max_open_conns: 100    # Maximum open connections
  conn_max_lifetime: 60  # Connection max lifetime (minutes)

# ------------------------------------------------------------
# Logger Configuration
# ------------------------------------------------------------
logger:
  level: "info"          # Log level: debug, info, warn, error
                         # Env override: ORRIS_LOGGER_LEVEL=debug
  format: "console"      # Output format: json (prod), console (dev)
                         # Env override: ORRIS_LOGGER_FORMAT=json
  output_path: "stdout"  # Output: stdout, stderr, or file path
                         # Env override: ORRIS_LOGGER_OUTPUT_PATH=/var/log/orris.log

# ============================================================
# Usage Examples
# ============================================================
#
# Development (local with config.yaml):
#   1. cp config.example.yaml config.yaml
#   2. Edit config.yaml with your local DB settings
#   3. Set only the password as env var:
#      export ORRIS_DATABASE_PASSWORD=local_password
#   4. Run: ./bin/orris server
#
# Production (environment variables only):
#   export ORRIS_SERVER_MODE=release
#   export ORRIS_SERVER_PORT=8080
#   export ORRIS_DATABASE_HOST=prod-db.example.com
#   export ORRIS_DATABASE_USERNAME=prod_user
#   export ORRIS_DATABASE_PASSWORD=secure_prod_password
#   export ORRIS_DATABASE_DATABASE=orris_production
#   export ORRIS_LOGGER_LEVEL=warn
#   export ORRIS_LOGGER_FORMAT=json
#   ./bin/orris server
#
# Docker Compose (docker-compose.yml):
#   environment:
#     - ORRIS_DATABASE_HOST=mysql
#     - ORRIS_DATABASE_PASSWORD=${DB_PASSWORD}
#     - ORRIS_SERVER_MODE=release
#
# Kubernetes (using ConfigMap + Secret):
#   # ConfigMap for non-sensitive configs
#   # Secret for ORRIS_DATABASE_PASSWORD
#   # See deployment examples in docs/
# ============================================================